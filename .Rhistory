library(ggplot2)
library(plyr)
library(dplyr)
### Set File Path for Window Environment
setwd('C:/Users/LeeSooHwan/Desktop/github/byteeVisualization')
### Set File Path for Mac Environment
setwd("/Users/Soohwan/Desktop/github/byteeVisualization")
### failFactor Visualization
# Load Whole Data
failFactor <- read.csv(file = "./data/backgroundResearch/revisedData/failFactor.csv", header=T, fileEncoding="UTF-8-BOM")
# Everything Visualization
failFactor$factor <- factor(failFactor$factor, level = c("badCondition", "temptation", "bothering", "lackOfTime",
"methodUncertainty", "boring", "slightEffect", "ETC"))
failFactor$type <- factor(failFactor$type, level = c("total", "youtube", "app", "alone"))
failFactor$score <- as.numeric(failFactor$score)
factorLabel <- c("Bad condition", "Temptation", "Bothering", "Lack of Time",
"An uncertain way", "Boring", "Slight Effect", "ETC") # Label should be revised!!!
p <- ggplot(failFactor, aes(x=factor, y=score, fill=type, label = score)) +
geom_bar(stat="identity", position=position_dodge()) +
scale_x_discrete(labels = factorLabel) +
scale_fill_manual(name = "", labels = c("Total", "YouTube", "App", "Alone"), values = c("total" = "#01BFC4", "youtube" = "#f8766d","app" = "#619cff", "alone" = "#00ba38")) +
geom_text(size = 4, position=position_dodge(0.9), vjust=-0.25) +
labs(title="", x="", y = "count") + theme(legend.position="bottom", plot.title = element_text(hjust = 0.5), text=element_text(size=15))
p
# Total Only
failFactorTotal <- subset(failFactor, type == "total")
failFactorTotal$factor <- factor(failFactorTotal$factor, level = c("badCondition", "temptation", "bothering", "lackOfTime",
"methodUncertainty", "boring", "slightEffect", "ETC"))
factorLabel <- c("Bad condition", "Temptation", "Bothering", "Lack of Time",
"An uncertain way", "Boring", "Slight Effect", "ETC") # Label should be revised!!!
p<- ggplot(data = failFactorTotal, aes(x=factor, y=score, label=score))+
geom_bar(stat="identity", fill = "#01BFC4") +
scale_x_discrete(labels = factorLabel) +
geom_text(size = 5, position = "identity") +
labs(title="", x="", y = "count") +
theme(legend.position="none", plot.title = element_text(hjust = 0.5), text=element_text(size=15))
print(p)
# 3 Factors Only (YouTube, App, Alone)
failFactorThree <- subset(failFactor, type %in% c("youtube", "app", "alone"))
failFactorThree$factor <- factor(failFactorThree$factor, level = c("badCondition", "temptation", "bothering", "lackOfTime",
"methodUncertainty", "boring", "slightEffect", "ETC"))
### 5-points Likert Scale Visualization
# Necessary Function - Start Y axis from n
require(scales)
my_trans <- function(from=0)
{
trans <- function(x) x-from
inv <- function(x) x+from
trans_new("myscale", trans, inv,
domain = c(from, Inf))
}
# Load Whole Data
likertScale <- read.csv(file = "./data/backgroundResearch/revisedData/likertScale.csv", header=T, fileEncoding="UTF-8-BOM")
likertScale <-likertScale[,c(1:4)]
likertScale$type <- as.factor(likertScale$type)
likertScale$total <- as.factor(likertScale$total)
likertScaleYoutube <- subset(likertScale, type == "youtube")
likertScaleApp <- subset(likertScale, type == "app")
likertScaleAlone <- subset(likertScale, type == "alone")
# Normality Test
shapiro.test(likertScale$score)    # Whole
shapiro.test(likertScaleYoutube$score)    # Youtube
shapiro.test(likertScaleApp$score)    # App
shapiro.test(likertScaleAlone$score)    # Alone
# Check number of each reponses
length(which(likertScale$type=="youtube"))
length(which(likertScale$type=="app"))
length(which(likertScale$type=="alone"))
#################
# Barplot - Total
likertScaleTotalOnly <- read.csv(file = "./data/backgroundResearch/revisedData/likertScaleTotalOnly.csv", header=T, fileEncoding="UTF-8-BOM")
os_summary <- data.frame(matrix(ncol = 5))
colnames(os_summary) <- c("type", "meanVal", "sdVal", "seVal", "ciVal")
meanVal <- mean(likertScaleTotalOnly$score)
sdVal <- sd(likertScaleTotalOnly$score)
seVal <- sdVal/sqrt(38)
ciVal <- 1.96*seVal
os_summary <- rbind(os_summary, c("total", round(meanVal,2), round(sdVal,2), round(seVal,2), round(ciVal,2)))
os_summary <- os_summary[-1 , ]
row.names(os_summary) = NULL
os_summary$meanVal = as.numeric(os_summary$meanVal)
os_summary$sdVal = as.numeric(os_summary$sdVal)
os_summary$seVal = as.numeric(os_summary$seVal)
os_summary$ciVal = as.numeric(os_summary$ciVal)
# Default bar plot with 95% confidence level error bar
os_summary$type <- factor(os_summary$type)
satisfactionLabel <- "Total"
p <- ggplot(os_summary, aes(x=type, y=meanVal)) +
geom_bar(stat="identity", position=position_dodge(), fill = "#01BFC4") +
geom_errorbar(aes(ymin=meanVal-ciVal, ymax=meanVal+ciVal), width=.2,position=position_dodge(.9)) +
scale_y_continuous(trans = my_trans( from=1),breaks = c(1,2,3,4,5)) +
scale_x_discrete(labels = satisfactionLabel) +
coord_cartesian(ylim = c(1, 5)) +
#scale_fill_manual(values = "#01BFC4")+
labs(title="", x="", y = "score") +
theme(legend.position="none", plot.title = element_text(hjust = 0.5), text=element_text(size=15))
p
View(os_summary)
# Normality Test
shapiro.test(likertScale$score)    # Whole
# Composition Plot
composition <- read.csv(file = "./data/backgroundResearch/revisedData/methodComposition.csv", header=T, fileEncoding="UTF-8-BOM")
View(composition)
p <- ggplot(methodComposition, aes(score)) + geom_bar(aes(fill=method), position="fill")
# Composition Plot
methodComposition <- read.csv(file = "./data/backgroundResearch/revisedData/methodComposition.csv", header=T, fileEncoding="UTF-8-BOM")
p <- ggplot(methodComposition, aes(score)) + geom_bar(aes(fill=method), position="fill")
p
p <- ggplot(methodComposition + geom_bar(aes(fill=method), position="fill")
# Boxplot - Whole
likertScaleWithTotal <- read.csv(file = "./data/backgroundResearch/revisedData/likertScaleWithTotal.csv", header=T, fileEncoding="UTF-8-BOM")
p <- ggplot(methodComposition) + geom_bar(aes(fill=method), position="fill")
p
p <- ggplot(methodComposition, aes(method)) + geom_bar(aes(fill=method), position="fill")
p
p <- ggplot(methodComposition, aes(method)) + geom_bar(aes(fill=score), position="fill")
p
p <- ggplot(methodComposition, aes(fill=method)) + geom_bar(aes(fill=method), position="fill")
p
p <- ggplot(methodComposition, aes(fill=method)) + geom_bar(position="fill")
p
p <- ggplot(methodComposition, aes("",fill=method)) + geom_bar(position="fill")
p
p <- ggplot(methodComposition, aes("",fill=score)) + geom_bar(position="fill")
p
p <- ggplot(methodComposition, aes("",fill=method)) + geom_bar(position="score")
p
methodComposition$method <- factor(methodComposition$method, level = c("youtube", "app", "alone"))
p <- ggplot(methodComposition, aes("",fill=method)) + geom_bar(position="score")
p <- ggplot(methodComposition, aes("",fill=method)) + geom_bar(position="method")
p <- ggplot(methodComposition, aes("",fill=method)) + geom_bar(position="fill")
p
p <- ggplot(methodComposition, aes("",fill=score)) + geom_bar(position="fill")
p
p <- ggplot(methodComposition, aes("",fill=method)) + geom_bar(position="fill")
p
# Composition Plot
methodComposition <- read.csv(file = "./data/backgroundResearch/revisedData/methodComposition.csv", header=T, fileEncoding="UTF-8-BOM")
methodComposition$method <- factor(methodComposition$method, level = c("youtube", "app", "alone"))
p <- ggplot(methodComposition, aes("",fill=method)) + geom_bar(position="fill")
p
p <- ggplot(methodComposition, aes("",fill=method)) + geom_bar(position="fill")+
coord_polar(theta = "y")
p
p <- ggplot(methodComposition, aes(x=method, y=score,fill=method)) + geom_bar(position="fill")+
coord_polar(theta = "y")
p
p <- ggplot(methodComposition, aes(y=score,fill=method)) + geom_bar(position="fill")+
coord_polar(theta = "y")
p
# Composition Plot
methodComposition <- read.csv(file = "./data/backgroundResearch/revisedData/methodComposition.csv", header=T, fileEncoding="UTF-8-BOM")
methodComposition$method <- factor(methodComposition$method, level = c("youtube", "app", "alone"))
p <- ggplot(methodComposition, aes(y=score,fill=method)) + geom_bar(position="fill")+
coord_polar(theta = "y")
p
p <- ggplot(methodComposition, aes(y=score,fill=method)) + geom_bar(position="fill")+
coord_polar(theta = "x")
p
p <- ggplot(methodComposition, aes(y=score,fill=method)) + geom_bar(position="fill")
p
p <- ggplot(methodComposition, aes("", fill=method)) + geom_bar(position="fill")
p
p <- ggplot(methodComposition, aes("", fill=method)) + geom_bar(position="fill") +
coord_polar(theta = "y")
p
p <- ggplot(methodComposition, aes("", fill=method)) + geom_bar(position="fill") +
labs(title="", x="", y = "")+
coord_polar(theta = "y")
p
p <- ggplot(methodComposition, aes("", fill=method)) + geom_bar(position="fill") +
labs(title="", x="", y = "")
#+ coord_polar(theta = "y")
p
p <- ggplot(methodComposition, aes("", fill=method)) + geom_bar(position="fill") +
labs(title="", x="Total", y = "%")
#+ coord_polar(theta = "y")
p
factorLabel <- c("Total", "YouTube", "App", "Alone") # Label should be revised!!!
p <- ggplot(methodComposition, aes("", fill=method)) + geom_bar(position="fill") +
labs(title="", x="Total", y = "%") +
scale_fill_manual(name = "", labels = c("Total", "YouTube", "App", "Alone"))
#+ coord_polar(theta = "y")
p
p <- ggplot(methodComposition, aes("", fill=method)) + geom_bar(position="fill") +
labs(title="", x="Total", y = "%") +
scale_fill_manual(name = "", labels = c("YouTube", "App", "Alone"))
#+ coord_polar(theta = "y")
p
p <- ggplot(methodComposition, aes("", fill=method)) + geom_bar(position="fill") +
labs(title="", x="Total", y = "%") +
scale_x_discrete(labels = factorLabel)
#+ coord_polar(theta = "y")
p
factorLabel <- c("YouTube", "App", "Alone") # Label should be revised!!!
p <- ggplot(methodComposition, aes("", fill=method)) + geom_bar(position="fill") +
labs(title="", x="Total", y = "%") +
scale_x_discrete(labels = factorLabel)
#+ coord_polar(theta = "y")
p
p <- ggplot(methodComposition, aes("", fill=method)) + geom_bar(position="fill") +
labs(title="", x="Total", y = "%") +
scale_fill_discrete(labels = factorLabel)
#+ coord_polar(theta = "y")
p
p <- ggplot(methodComposition, aes("", fill=method)) + geom_bar(position="fill") +
labs(title="", x="Total", y = "%") +
scale_fill_discrete(name = "Method", labels = factorLabel)
#+ coord_polar(theta = "y")
p
+ coord_polar(theta = "y")
p
p <- ggplot(methodComposition, aes("", fill=method)) + geom_bar(position="fill") +
labs(title="", x="Total", y = "%") +
scale_fill_discrete(name = "Method", labels = factorLabel) +
coord_polar(theta = "y")
p
library(ggplot2)
library(plyr)
library(dplyr)
### Set File Path for Mac Environment
setwd("/Users/Soohwan/Desktop/github/DataVisualization-ZoomProj")
### Read Raw Data
rawData <- read.csv(file = "./data/userEvaluation/revisedData/expressionUseFrequencyRaw.csv", header=T, fileEncoding="UTF-8-BOM")
summaryData <- read.csv(file = "./data/userEvaluation/revisedData/expressionUseFrequency.csv", header=T, fileEncoding="UTF-8-BOM")
### Start Y axis from n
require(scales)
my_trans <- function(from=0)
{
trans <- function(x) x-from
inv <- function(x) x+from
trans_new("myscale", trans, inv,
domain = c(from, Inf))
}
### Draw bar plot
summaryData$expression <- factor(summaryData$expression, level = c("one", "two", "three", "four", "five", "six", "seven", "eight", "nine"))
summaryData$kind <- factor(summaryData$kind, level = c("hit", "falseAlarm", "miss"))
summaryData$value <- as.numeric(summaryData$value)
p <- ggplot(summaryData, aes(x=expression, y=value, fill=kind, label = value)) +
geom_bar(stat="identity", position=position_dodge()) +
scale_fill_manual(name = "Signal Detection", labels = c("Hit", "False Alarm", "Miss"), values = c("hit" = "#00ba38","falseAlarm" = "#619cff", 'miss' = '#f8766d')) +
geom_text(size = 4, position=position_dodge(0.9), vjust=-0.25) +
labs(title="Frequency of use for each emoji", x="", y = "Number") + theme(legend.position="left", plot.title = element_text(hjust = 0.5), text=element_text(size=15))
p
### Kruskal-wallis test
rawData$kind <- as.factor(rawData$kind)
rawData$expression <- factor(rawData$expression, levels = c("one", "two", "three", "four", "five", "six", "seven", "eight", "nine"))
rawData$value <- as.numeric(rawData$value)
hit <- subset(rawData, rawData$kind == 'hit')
hit$expression <- factor(hit$expression, levels = c("one", "two", "three", "four", "five", "six", "seven", "eight", "nine"))
hit$value <- as.numeric(hit$value)
falseAlarm <- subset(rawData, rawData$kind == 'falseAlarm')
falseAlarm$expression <- factor(falseAlarm$expression, levels = c("one", "two", "three", "four", "five", "six", "seven", "eight", "nine"))
falseAlarm$value <- as.numeric(falseAlarm$value)
miss <- subset(rawData, rawData$kind == 'miss')
miss$expression <- factor(miss$expression, levels = c("one", "two", "three", "four", "five", "six", "seven", "eight", "nine"))
miss$value <- as.numeric(miss$value)
# kruskal test
kruskal.test(value ~ expression, data = hit)
kruskal.test(value ~ expression, data = falseAlarm)
kruskal.test(value ~ expression, data = miss)
# pairwise.wilcox test
pairwise.wilcox.test(hit$value, hit$expression, p.adj="bonferroni")
# kruskal test
kruskal.test(value ~ expression, data = hit)
kruskal.test(value ~ expression, data = falseAlarm)
kruskal.test(value ~ expression, data = miss)
View(rawData)
View(hit)
### failFactor Visualization
# Load Whole Data
failFactor <- read.csv(file = "./data/backgroundResearch/revisedData/failFactor.csv", header=T, fileEncoding="UTF-8-BOM")
View(failFactor)
View(failFactorTotal)
# Kruskal Test
kruskal.test(score ~ factor, data = failFactorTotal)
View(hit)
# Kruskal Test
kruskal.test(score ~ type, data = failFactorTotal)
View(failFactorTotal)
# Kruskal Test
kruskal.test(score ~ factor, data = failFactorTotal)
library(exactRankTests)
# wilcox.test with exact
install.packages("exactRankTests")
library(exactRankTests)
exactRankTests::wilcox.exact(subset(hit$value, hit$expression == "one"), subset(hit$value, hit$expression == "two"), p.adj="bonferroni")
# pairwise.wilcox test
pairwise.wilcox.test(hit$value, hit$expression, p.adj="bonferroni")
# pairwise.wilcox test
pairwise.wilcox.test(failFactorTotal$score, failFactorTotal$factor, p.adj="bonferroni")
View(hit)
View(failFactorTotal)
