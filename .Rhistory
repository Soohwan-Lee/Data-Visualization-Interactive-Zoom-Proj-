library(dplyr)
library(ggplot2)
library(reshape2)
library(Hmisc)
####Reading Data
rawData = read.csv("/Users/Soohwan/Desktop/rawData.csv", header=TRUE)
####Elicit Data
participant = subset(rawData,select=participant)
size = subset(rawData,select=size)
gesture = subset(rawData,select=gesture)
physicalDemand1 = subset(rawData,select=physicalDemand1)
physicalDemand2 = subset(rawData,select=physicalDemand2)
#physicalDemand = cbind(physicalDemand1,physicalDemand2)
physicalDemand = subset(rawData, select=physicalDemand)
meanPhysicalDemand1 = mean(rawData$physicalDemand1)
meanPhysicalDemand2 = mean(rawData$physicalDemand2)
preference1 = subset(rawData,select=preference1)
preference2 = subset(rawData, select=preference2)
preference = subset(rawData,select=preference)
meanPreference1 = mean(rawData$preference1)
meanPreference2 = mean(rawData$preference2)
performance1 = subset(rawData, select=performance1)
performance1 = subset(rawData, select=performance2)
performance.1 = subset(rawData,select=performance.1)
meanPerformance1 = mean(rawData$performance1)
meanPerformance2 = mean(rawData$performance2)
####Normality Test -> Deos not follow Normal Distribution!
shapiro.test(rawData$physicalDemand1)
shapiro.test(rawData$physicalDemand2)
shapiro.test(rawData$preference1)
shapiro.test(rawData$preference2)
shapiro.test(rawData$performance1)
shapiro.test(rawData$performance2)
####Mean of Physical Demand
s <- c("small", "medium", "big")
g <- c("pinch", "halfGrab", "fist")
mean_raw <- data.frame(matrix(ncol = 3))
colnames(mean_raw) <- c("cond1", "cond2", "mean")
for (i in 1:length(s)) {
for (j in 1:length(g)) {
x <- (mean(subset(rawData, rawData$size == s[i] & rawData$gesture == g[j])$physicalDemand))
mean_raw <- rbind(mean_raw, c(s[i], g[j], x))
}
}
mean_raw <- mean_raw[-1 , ]
####Mean of Preference
s <- c("small", "medium", "big")
g <- c("pinch", "halfGrab", "fist")
mean_prefer <- data.frame(matrix(ncol = 3))
colnames(mean_prefer) <- c("cond1", "cond2", "mean")
for (i in 1:length(s)) {
for (j in 1:length(g)) {
x <- (mean(subset(rawData, rawData$size == s[i] & rawData$gesture == g[j])$preference))
mean_prefer <- rbind(mean_prefer, c(s[i], g[j], x))
}
}
mean_prefer <- mean_prefer[-1 , ]
####Mean of Performance Time
s <- c("small", "medium", "big")
g <- c("pinch", "halfGrab", "fist")
mean_perform <- data.frame(matrix(ncol = 3))
colnames(mean_perform) <- c("cond1", "cond2", "mean")
for (i in 1:length(s)) {
for (j in 1:length(g)) {
x <- (mean(subset(rawData, rawData$size == s[i] & rawData$gesture == g[j])$performance.1))
mean_perform <- rbind(mean_perform, c(s[i], g[j], x))
}
}
mean_perform <- mean_perform[-1 , ]
####Wilcoxon Signed Rank Test between variables
wilcox.test(rawData$physicalDemand2-rawData$physicalDemand1)
#wilcox.test(rawData$physicalDemand2,rawData$physicalDemand1,paired=TRUE)
wilcox.test(rawData$preference2-rawData$preference1)
wilcox.test(rawData$performance2-rawData$performance1)
####Spearman's Rank Order Correlation between variables
cor.test(rawData$physicalDemand,rawData$preference,method = "spearman",exact=F)
cor.test(rawData$physicalDemand,rawData$performance.1,method = "spearman",exact=F)
cor.test(rawData$preference,rawData$performance.1,method = "spearman",exact=F)
####Pearson Correlation of consistency
#p0 = subset(rawData, select=c(participant,size,gesture,physicalDemand), participant=="0")
#p0 = subset(rawData, participant=="0")
cor.test(rawData$physicalDemand1,rawData$physicalDemand2,method = "spearman",exact=F)
cor.test(rawData$preference1,rawData$preference2,method = "spearman",exact=F)
####Spearman's Correlation Heatmap
d <- cbind(rawData$physicalDemand, rawData$preference, rawData$performance.1)
colnames(d) = c("Physical Demand", "Preference", "Performance Time")
cormatrix = rcorr(as.matrix(d), type='spearman')
cordata = melt(cormatrix$r)
ggplot(cordata, aes(x=Var1, y=Var2, fill=value)) + geom_tile() + xlab("") + ylab("")
####RM ANOVA for Physical Demand -> Fail
library(reshape2)
f1 = cbind(participant, gesture, size, physicalDemand1, physicalDemand2)
f1$id<-1:90
f1$id<-factor(f1$id)
f1$gesture<-factor(f1$gesture)
f1$size<-factor(f1$size)
f1$participant<-factor(f1$participant)
m<-melt(f1,id.vars=c("id","participant","gesture","size"))
colnames(m)<-c("id","participant","gesture","size","time","value")
a<-aov(value~gesture*size*time+Error(id/time),data=m)
#a<-aov(value~gesture+size+gesture*size,data=m)
summary(a)
#### RM 2 way ANOVA for Physical Demand 2 try
r1 = cbind(participant, gesture, size, physicalDemand2)
r1$participant<-factor(r1$participant)
r1$gesture<-factor(r1$gesture)
r1$size<-factor(r1$size)
b1<-aov(r1$physicalDemand2~r1$size*r1$gesture+Error(r1$participant/(r1$size*r1$gesture)),data=r1)
summary(b1)
####2 way ANOVA for Physical Demand
f1 = cbind(gesture, size, physicalDemand2)
f1$gesture<-factor(f1$gesture)
f1$size<-factor(f1$size)
a1<-aov(f1$physicalDemand~f1$size*f1$gesture,data=f1)
summary(a1)
#Box plot & Interaction Plot
par(mfrow = c(2, 2))
levels(f1$gesture)
levels(f1$gesture)<-c("Fist", "Half Grab", "Pinch")
g1<-factor(f1$gesture, levels=c("Pinch", "Half Grab", "Fist"))
plot(f1$physicalDemand2 ~ g1, xlab="Gesture", ylab="Physical Demand", main="Physical Demand by Gesture")
levels(f1$size)
levels(f1$size)<-c("Big", "Medium", "Small")
s1<-factor(f1$size, levels=c("Small", "Medium", "Big"))
plot(f1$physicalDemand2 ~ s1, xlab="Size", ylab="Physical Demand", main="Physical Demand by Size")
interaction.plot(s1, g1, f1$physicalDemand2, bty='l',xlab="Size", ylab="Physical Demand",trace.label="Gesture", main="Physical Demand - Interaction Effect Plot")
interaction.plot(g1,s1, f1$physicalDemand2, bty='l',xlab="Gesture", ylab="Physical Demand",trace.label="Size", main="Physical Demand - Interaction Effect Plot")
#### RM 2 way ANOVA for Physical Demand 2 try
r1 = cbind(participant, gesture, size, physicalDemand2)
r1$participant<-factor(r1$participant)
r1$gesture<-factor(r1$gesture)
r1$size<-factor(r1$size)
b1<-aov(r1$physicalDemand2~r1$size*r1$gesture+Error(r1$participant/(r1$size*r1$gesture)),data=r1)
summary(b1)
a1<-aov(f1$physicalDemand~f1$size*f1$gesture,data=f1)
summary(a1)
####2 way ANOVA for Physical Demand
f1 = cbind(gesture, size, physicalDemand2)
f1$gesture<-factor(f1$gesture)
f1$size<-factor(f1$size)
a1<-aov(f1$physicalDemand~f1$size*f1$gesture,data=f1)
summary(a1)
View(f1)
View(physicalDemand2)
####2 way ANOVA for Physical Demand
f1 = cbind(gesture, size, physicalDemand2)
f1$gesture<-factor(f1$gesture)
f1$size<-factor(f1$size)
a1<-aov(f1$physicalDemand~f1$size*f1$gesture,data=f1)
summary(a1)
a1<-aov(f1$physicalDemand2~f1$size*f1$gesture,data=f1)
summary(a1)
View(f1)
#Box plot & Interaction Plot
par(mfrow = c(2, 2))
levels(f1$gesture)
levels(f1$gesture)<-c("Fist", "Half Grab", "Pinch")
g1<-factor(f1$gesture, levels=c("Pinch", "Half Grab", "Fist"))
levels(f1$size)
levels(f1$size)<-c("Big", "Medium", "Small")
s1<-factor(f1$size, levels=c("Small", "Medium", "Big"))
interaction.plot(g1,s1, f1$physicalDemand2, bty='l',xlab="Gesture", ylab="Physical Demand",trace.label="Size", main="Physical Demand - Interaction Effect Plot")
#### RM 2 way ANOVA for Preference 2 try
r2 = cbind(participant, gesture, size, preference2)
r2$participant<-factor(r2$participant)
r2$gesture<-factor(r2$gesture)
r2$size<-factor(r2$size)
b2<-aov(r2$preference2~r2$size*r2$gesture+Error(r2$participant/(r2$size*r2$gesture)),data=r2)
summary(b2)
####2 way ANOVA for Preference
f2 = cbind(gesture,size,preference2)
f2$gesture<-factor(f2$gesture)
f2$size<-factor(f2$size)
a2<-aov(preference~gesture*size,data=f2)
summary(a2)
#Box plot & Interaction Plot
levels(f2$gesture)
levels(f2$gesture)<-c("Fist", "Half Grab", "Pinch")
g2<-factor(f2$gesture, levels=c("Pinch", "Half Grab", "Fist"))
levels(f2$size)
levels(f2$size)<-c("Big", "Medium", "Small")
s2<-factor(f2$size, levels=c("Small", "Medium", "Big"))
interaction.plot(g2,s2, f2$preference2, bty='l',xlab="Gesture", ylab="Preference",trace.label="Size", main="Preference - Interaction Effect Plot")
plot(f1$physicalDemand2 ~ g1, xlab="Gesture", ylab="Physical Demand", main="Physical Demand by Gesture")
plot(f1$physicalDemand2 ~ g1, xlab="Gesture", ylab="Physical Demand", main="Physical Demand by Gesture")
plot(f1$physicalDemand2 ~ g1, xlab="Gesture", ylab="Physical Demand", main="Physical Demand by Gesture")
plot(f2$preference2 ~ g2, xlab="Gesture", ylab="Preference", main="Preference by Gesture")
plot(f1$physicalDemand2 ~ s1, xlab="Size", ylab="Physical Demand", main="Physical Demand by Size")
plot(f2$preference2 ~ s2, xlab="Size", ylab="Preference", main="Preference by Size")
library(dplyr)
library(ggplot2)
library(reshape2)
library(Hmisc)
####Reading Data
rawData = read.csv("/Users/Soohwan/Desktop/rawData.csv", header=TRUE)
####Elicit Data
participant = subset(rawData,select=participant)
size = subset(rawData,select=size)
gesture = subset(rawData,select=gesture)
physicalDemand1 = subset(rawData,select=physicalDemand1)
physicalDemand2 = subset(rawData,select=physicalDemand2)
#physicalDemand = cbind(physicalDemand1,physicalDemand2)
physicalDemand = subset(rawData, select=physicalDemand)
meanPhysicalDemand1 = mean(rawData$physicalDemand1)
meanPhysicalDemand2 = mean(rawData$physicalDemand2)
preference1 = subset(rawData,select=preference1)
preference2 = subset(rawData, select=preference2)
preference = subset(rawData,select=preference)
meanPreference1 = mean(rawData$preference1)
meanPreference2 = mean(rawData$preference2)
performance1 = subset(rawData, select=performance1)
performance1 = subset(rawData, select=performance2)
performance.1 = subset(rawData,select=performance.1)
meanPerformance1 = mean(rawData$performance1)
meanPerformance2 = mean(rawData$performance2)
####Normality Test -> Deos not follow Normal Distribution!
shapiro.test(rawData$physicalDemand1)
shapiro.test(rawData$physicalDemand2)
shapiro.test(rawData$preference1)
shapiro.test(rawData$preference2)
shapiro.test(rawData$performance1)
shapiro.test(rawData$performance2)
####Mean of Physical Demand
s <- c("small", "medium", "big")
g <- c("pinch", "halfGrab", "fist")
mean_raw <- data.frame(matrix(ncol = 3))
colnames(mean_raw) <- c("cond1", "cond2", "mean")
for (i in 1:length(s)) {
for (j in 1:length(g)) {
x <- (mean(subset(rawData, rawData$size == s[i] & rawData$gesture == g[j])$physicalDemand))
mean_raw <- rbind(mean_raw, c(s[i], g[j], x))
}
}
mean_raw <- mean_raw[-1 , ]
####Mean of Preference
s <- c("small", "medium", "big")
g <- c("pinch", "halfGrab", "fist")
mean_prefer <- data.frame(matrix(ncol = 3))
colnames(mean_prefer) <- c("cond1", "cond2", "mean")
for (i in 1:length(s)) {
for (j in 1:length(g)) {
x <- (mean(subset(rawData, rawData$size == s[i] & rawData$gesture == g[j])$preference))
mean_prefer <- rbind(mean_prefer, c(s[i], g[j], x))
}
}
mean_prefer <- mean_prefer[-1 , ]
####Mean of Performance Time
s <- c("small", "medium", "big")
g <- c("pinch", "halfGrab", "fist")
mean_perform <- data.frame(matrix(ncol = 3))
colnames(mean_perform) <- c("cond1", "cond2", "mean")
for (i in 1:length(s)) {
for (j in 1:length(g)) {
x <- (mean(subset(rawData, rawData$size == s[i] & rawData$gesture == g[j])$performance.1))
mean_perform <- rbind(mean_perform, c(s[i], g[j], x))
}
}
mean_perform <- mean_perform[-1 , ]
####Wilcoxon Signed Rank Test between variables
wilcox.test(rawData$physicalDemand2-rawData$physicalDemand1)
#wilcox.test(rawData$physicalDemand2,rawData$physicalDemand1,paired=TRUE)
wilcox.test(rawData$preference2-rawData$preference1)
wilcox.test(rawData$performance2-rawData$performance1)
####Spearman's Rank Order Correlation between variables
cor.test(rawData$physicalDemand,rawData$preference,method = "spearman",exact=F)
cor.test(rawData$physicalDemand,rawData$performance.1,method = "spearman",exact=F)
cor.test(rawData$preference,rawData$performance.1,method = "spearman",exact=F)
####Pearson Correlation of consistency
#p0 = subset(rawData, select=c(participant,size,gesture,physicalDemand), participant=="0")
#p0 = subset(rawData, participant=="0")
cor.test(rawData$physicalDemand1,rawData$physicalDemand2,method = "spearman",exact=F)
cor.test(rawData$preference1,rawData$preference2,method = "spearman",exact=F)
####Spearman's Correlation Heatmap
d <- cbind(rawData$physicalDemand, rawData$preference, rawData$performance.1)
colnames(d) = c("Physical Demand", "Preference", "Performance Time")
cormatrix = rcorr(as.matrix(d), type='spearman')
cordata = melt(cormatrix$r)
ggplot(cordata, aes(x=Var1, y=Var2, fill=value)) + geom_tile() + xlab("") + ylab("")
####RM ANOVA for Physical Demand -> Fail
library(reshape2)
f1 = cbind(participant, gesture, size, physicalDemand1, physicalDemand2)
f1$id<-1:90
f1$id<-factor(f1$id)
f1$gesture<-factor(f1$gesture)
f1$size<-factor(f1$size)
f1$participant<-factor(f1$participant)
m<-melt(f1,id.vars=c("id","participant","gesture","size"))
colnames(m)<-c("id","participant","gesture","size","time","value")
a<-aov(value~gesture*size*time+Error(id/time),data=m)
#a<-aov(value~gesture+size+gesture*size,data=m)
summary(a)
#### RM 2 way ANOVA for Physical Demand 2 try
r1 = cbind(participant, gesture, size, physicalDemand2)
r1$participant<-factor(r1$participant)
r1$gesture<-factor(r1$gesture)
r1$size<-factor(r1$size)
b1<-aov(r1$physicalDemand2~r1$size*r1$gesture+Error(r1$participant/(r1$size*r1$gesture)),data=r1)
summary(b1)
rawData = read.csv("/Users/Soohwan/Desktop/data.csv", header=TRUE)
View(rawData)
#r2 = cbind(participant, gesture, size, preference2)
rawData$participant<-factor(rawData$participant)
rawData$mode<-factor(rawData$mode)
rawData$interaction<-factor(rawData$interaction)
b2<-aov(rawData$value~rawData$mode*rawData$interaction+Error(rawData$participant/(rawData$mode*rawData$interaction)),data=rawData)
summary(b2)
View(cormatrix)
library(ggplot2)
library(plyr)
library(dplyr)
### Set File Path for Window Environment
setwd('C:/Users/LeeSooHwan/Desktop/DataVisualization-ZoomProj')
### Set File Path for Mac Environment
setwd("/Users/Soohwan/Desktop/DataVisualization-ZoomProj")
### Read Raw Data
data <- read.csv(file = "./data/questionnaire/rawData/rawData.csv", header=T, fileEncoding="UTF-8-BOM")
### Age of Participants
meanAge = mean(data$age)
variationAge = var(data$age)
stdAge = sd(data$age)
### Normality Test
# Previous Experience
shapiro.test(data$offlineExperience)
shapiro.test(data$offlineAggressivity)
shapiro.test(data$onlineExperience)
shapiro.test(data$onlineAggressivity)
# Online Experience - Participation Change
shapiro.test(data$onlineMeetingParticipationChange)
shapiro.test(data$onlineClassParticipationChange)
# Online Experience - Overal Satisfaction
shapiro.test(data$onlineSatisfaction)
shapiro.test(data$onlineVerbalSatisfaction)
shapiro.test(data$onlineNonverbalSatisfaction)
### Data Preprocessing Function (summary data)
data_summary <- function(data, varname, groupnames){
require(plyr)
summary_func <- function(x, col){
c(mean = mean(x[[col]], na.rm=TRUE), sd = sd(x[[col]], na.rm=TRUE))
}
data_sum<-ddply(data, groupnames, .fun=summary_func,varname)
data_sum <- rename(data_sum, c("mean" = varname))
return(data_sum)
}
### Previous Experience for On/Offline Meeting ###
# Data Preprocessing
previousExperience <- read.csv(file = "./data/questionnaire/revisedData/previousExperience.csv", header=T, fileEncoding="UTF-8-BOM")
head(previousExperience)
m <- c("offline", "online")
k <- c("experience", "participation")
pe_summary <- data.frame(matrix(ncol = 6))
colnames(pe_summary) <- c("meeting", "kind", "meanVal", "sdVal", "seVal", "ciVal")
for (i in 1:length(m)) {
for (j in 1:length(k)) {
meanVal <- (mean(subset(previousExperience, previousExperience$meeting == m[i] & previousExperience$kind == k[j])$value))
sdVal <- (sd(subset(previousExperience, previousExperience$meeting == m[i] & previousExperience$kind == k[j])$value))
seVal <- sdVal/sqrt(38)
ciVal <- 1.96*seVal
pe_summary <- rbind(pe_summary, c(m[i], k[j], round(meanVal,2), round(sdVal,2), round(seVal,2), round(ciVal,2)))
}
}
pe_summary <- pe_summary[-1 , ]
row.names(pe_summary) = NULL
# Change the Mean & Std to Numeric Value
pe_summary$meanVal = as.numeric(pe_summary$meanVal)
pe_summary$sdVal = as.numeric(pe_summary$sdVal)
pe_summary$seVal = as.numeric(pe_summary$seVal)
pe_summary$ciVal = as.numeric(pe_summary$ciVal)
# Default bar plot with 95% confidence level error bar
pe_summary$kind <- factor(pe_summary$kind, level = c("experience", "participation"))
p <- ggplot(pe_summary, aes(x=kind, y=meanVal, fill=meeting)) +
coord_cartesian(ylim = c(1, 7)) +
scale_y_continuous(breaks = c(1,2,3,4,5,6,7)) +
geom_bar(stat="identity", color="black", position=position_dodge()) +
geom_errorbar(aes(ymin=meanVal-ciVal, ymax=meanVal+ciVal), width=.2,position=position_dodge(.9))
print(p)
# Finished bar plot
p+labs(title="Previous Experience for On/Offline Meeting", x="Previous Expreience", y = "Score", fill = "Meeting") + theme(plot.title = element_text(hjust = 0.5))
# paried t-test for experience
t.test(subset(previousExperience, meeting == "offline" & kind == "experience")$value
- subset(previousExperience, meeting =="online" & kind == "experience")$value)
# paired t-test for participation
t.test(subset(previousExperience, meeting == "offline" & kind == "participation")$value
- subset(previousExperience, meeting =="online" & kind == "participation")$value)
### Online Experience - Participation Change ###
# Elicit dataframe form main data
onlineParticipationChange <- read.csv(file = "./data/questionnaire/revisedData/onlineParticipationChange.csv", header=T, fileEncoding="UTF-8-BOM")
head(onlineParticipationChange)
purpose <- c("meeting", "class")
opc_summary <- data.frame(matrix(ncol = 5))
colnames(opc_summary) <- c("purpose", "meanVal", "sdVal", "seVal", "ciVal")
for (i in 1:length(purpose)) {
meanVal <- (mean(subset(onlineParticipationChange, onlineParticipationChange$participation == purpose[i])$value))
sdVal <- (sd(subset(onlineParticipationChange, onlineParticipationChange$participation == purpose[i])$value))
seVal <- sdVal/sqrt(38)
ciVal <- 1.96*seVal
opc_summary <- rbind(opc_summary, c(purpose[i], round(meanVal,2), round(sdVal,2), round(seVal,2), round(ciVal,2)))
}
opc_summary <- opc_summary[-1 , ]
row.names(opc_summary) = NULL
# Change the Mean & Std to Numeric Value
opc_summary$meanVal = as.numeric(opc_summary$meanVal)
opc_summary$sdVal = as.numeric(opc_summary$sdVal)
opc_summary$seVal = as.numeric(opc_summary$seVal)
opc_summary$ciVal = as.numeric(opc_summary$ciVal)
# Default bar plot with 95% confidence level error bar
opc_summary$purpose <- factor(opc_summary$purpose, level = c("class", "meeting"))
p <- ggplot(opc_summary, aes(x=purpose, y=meanVal)) +
geom_bar(stat="identity", color="BLACK", fill = "#F8766D", position=position_dodge()) +
geom_errorbar(aes(ymin=meanVal-ciVal, ymax=meanVal+ciVal), width=.2,position=position_dodge(.9)) +
scale_y_continuous(breaks = c(1,2,3,4,5,6,7)) +
coord_cartesian(ylim = c(1, 7))
print(p)
# Finished bar plot
p+labs(title="Participation Change depend on the Meeting", x="Online Meeting Purpose", y = "Score") + theme(plot.title = element_text(hjust = 0.5))
### Online Experience - Overall Satisfaction ###
# Elicit dataframe form main data
onlineSatisfaction <- read.csv(file = "./data/questionnaire/revisedData/onlineSatisfaction.csv", header=T, fileEncoding="UTF-8-BOM")
head(onlineSatisfaction)
s <- c("overall", "verbal", "nonVerbal")
os_summary <- data.frame(matrix(ncol = 5))
colnames(os_summary) <- c("satisfaction", "meanVal", "sdVal", "seVal", "ciVal")
for (i in 1:length(s)) {
meanVal <- (mean(subset(onlineSatisfaction, onlineSatisfaction$satisfaction == s[i])$value))
sdVal <- (sd(subset(onlineSatisfaction, onlineSatisfaction$satisfaction == s[i])$value))
seVal <- sdVal/sqrt(38)
ciVal <- 1.96*seVal
os_summary <- rbind(os_summary, c(s[i], round(meanVal,2), round(sdVal,2), round(seVal,2), round(ciVal,2)))
}
os_summary <- os_summary[-1 , ]
row.names(os_summary) = NULL
# Change the Mean & Std to Numeric Value
os_summary$meanVal = as.numeric(os_summary$meanVal)
os_summary$sdVal = as.numeric(os_summary$sdVal)
os_summary$seVal = as.numeric(os_summary$seVal)
os_summary$ciVal = as.numeric(os_summary$ciVal)
# Default bar plot with 95% confidence level error bar
os_summary$satisfaction <- factor(os_summary$satisfaction, level = c("overall", "verbal", "nonVerbal"))
p <- ggplot(os_summary, aes(x=satisfaction, y=meanVal, fill = satisfaction)) +
geom_bar(stat="identity", color="BLACK", position=position_dodge()) +
geom_errorbar(aes(ymin=meanVal-ciVal, ymax=meanVal+ciVal), width=.2,position=position_dodge(.9)) +
scale_y_continuous(breaks = c(1,2,3,4,5,6,7)) +
coord_cartesian(ylim = c(1, 7)) +
scale_fill_manual(values = c("overall" = "#01BFC4","verbal" = "#01BFC4", 'nonVerbal' = '#01BFC4'))
print(p)
# Finished bar plot
p+labs(title="Satisfaction of Online Meeting", x="", y = "Score") + theme(legend.position="none", plot.title = element_text(hjust = 0.5))
# paired t-test
t.test(subset(onlineSatisfaction, satisfaction == "verbal")$value
- subset(onlineSatisfaction, satisfaction =="nonVerbal")$value)
