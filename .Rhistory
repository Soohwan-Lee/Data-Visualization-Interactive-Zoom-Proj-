library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
package_version(R.version)
R.version
install.packages("installer")
install.packages("installr")
library(installr)
check.for.updates.R()
install.R()
library(ggplot2)
library(plyr)
library(dplyr)
### Data Preprocessing Function (summary data)
data_summary <- function(data, varname, groupnames){
require(plyr)
summary_func <- function(x, col){
c(mean = mean(x[[col]], na.rm=TRUE),
sd = sd(x[[col]], na.rm=TRUE))
}
data_sum<-ddply(data, groupnames, .fun=summary_func,
varname)
data_sum <- rename(data_sum, c("mean" = varname))
return(data_sum)
}
### Previous Experience for On/Offline Meeting
# Data Preprocessing
previousExperience <- read.csv(file = "./rawData/questionnaire/previousExperience.csv", header=T, fileEncoding="UTF-8-BOM")
previousExperience$kind <- as.factor(previousExperience$kind)
pe_summary <- data_summary(previousExperience, varname="value", groupnames=c("meeting", "kind"))
# Convert dose to a factor variable
pe_summary2$kind=as.factor(pe_summary$kind)
head(pe_summary)
library(ggplot2)
library(plyr)
library(dplyr)
### Set File Path for Window Environment
setwd('C:/Users/LeeSooHwan/Desktop/DataVisualization-ZoomProj')
### Set File Path for Mac Environment
setwd("/Users/Soohwan/Desktop/DataVisualization-ZoomProj")
### Read Raw Data
data <- read.csv(file = "./rawData/questionnaire/rawData.csv", header=T, fileEncoding="UTF-8-BOM")
### Age of Participants
meanAge = mean(data$age)
variationAge = var(data$age)
stdAge = sd(data$age)
### Normality Test
# Previous Experience
shapiro.test(data$offlineExperience)
shapiro.test(data$offlineAggressivity)
shapiro.test(data$onlineExperience)
shapiro.test(data$onlineAggressivity)
# Online Experience - Participation Change
shapiro.test(data$onlineMeetingParticipationChange)
shapiro.test(data$onlineClassParticipationChange)
# Online Experience - Overal Satisfaction
shapiro.test(data$onlineSatisfaction)
shapiro.test(data$onlineVerbalSatisfaction)
shapiro.test(data$onlineNonverbalSatisfaction)
### Data Preprocessing Function (summary data)
data_summary <- function(data, varname, groupnames){
require(plyr)
summary_func <- function(x, col){
c(mean = mean(x[[col]], na.rm=TRUE),
sd = sd(x[[col]], na.rm=TRUE))
}
data_sum<-ddply(data, groupnames, .fun=summary_func,
varname)
data_sum <- rename(data_sum, c("mean" = varname))
return(data_sum)
}
### Previous Experience for On/Offline Meeting
# Data Preprocessing
previousExperience <- read.csv(file = "./rawData/questionnaire/previousExperience.csv", header=T, fileEncoding="UTF-8-BOM")
previousExperience$kind <- as.factor(previousExperience$kind)
previousExperience$meeting <- as.factor(previousExperience$meeting)
pe_summary <- data_summary(ToothGrowth, varname="value", groupnames=c("meeting", "kind"))
View(previousExperience)
pe_summary <- data_summary(previousExperience, varname="value", groupnames=c("meeting", "kind"))
### Previous Experience for On/Offline Meeting
# Data Preprocessing
previousExperience <- read.csv(file = "./rawData/questionnaire/previousExperience.csv", header=T, fileEncoding="UTF-8-BOM")
pe_summary <- data_summary(previousExperience, varname="value", groupnames=c("meeting", "kind"))
head(previousExperience)
### Previous Experience for On/Offline Meeting
# Data Preprocessing
previousExperience <- read.csv(file = "./rawData/questionnaire/previousExperience.csv", header=T, fileEncoding="UTF-8-BOM")
View(previousExperience)
package_version(R.version)
####Reading Data
rawData = read.csv("/Users/Soohwan/Desktop/rawData.csv", header=TRUE)
library(dplyr)
library(ggplot2)
library(reshape2)
library(Hmisc)
####Reading Data
rawData = read.csv("/Users/Soohwan/Desktop/rawData.csv", header=TRUE)
####Elicit Data
participant = subset(rawData,select=participant)
size = subset(rawData,select=size)
gesture = subset(rawData,select=gesture)
physicalDemand1 = subset(rawData,select=physicalDemand1)
physicalDemand2 = subset(rawData,select=physicalDemand2)
#physicalDemand = cbind(physicalDemand1,physicalDemand2)
physicalDemand = subset(rawData, select=physicalDemand)
meanPhysicalDemand1 = mean(rawData$physicalDemand1)
meanPhysicalDemand2 = mean(rawData$physicalDemand2)
preference1 = subset(rawData,select=preference1)
preference2 = subset(rawData, select=preference2)
preference = subset(rawData,select=preference)
meanPreference1 = mean(rawData$preference1)
meanPreference2 = mean(rawData$preference2)
performance1 = subset(rawData, select=performance1)
performance1 = subset(rawData, select=performance2)
performance.1 = subset(rawData,select=performance.1)
meanPerformance1 = mean(rawData$performance1)
meanPerformance2 = mean(rawData$performance2)
####Normality Test -> Deos not follow Normal Distribution!
shapiro.test(rawData$physicalDemand1)
shapiro.test(rawData$physicalDemand2)
shapiro.test(rawData$preference1)
shapiro.test(rawData$preference2)
shapiro.test(rawData$performance1)
shapiro.test(rawData$performance2)
####Mean of Physical Demand
s <- c("small", "medium", "big")
g <- c("pinch", "halfGrab", "fist")
mean_raw <- data.frame(matrix(ncol = 3))
colnames(mean_raw) <- c("cond1", "cond2", "mean")
for (i in 1:length(s)) {
for (j in 1:length(g)) {
x <- (mean(subset(rawData, rawData$size == s[i] & rawData$gesture == g[j])$physicalDemand))
mean_raw <- rbind(mean_raw, c(s[i], g[j], x))
}
}
View(mean_raw)
### Previous Experience for On/Offline Meeting
# Data Preprocessing
previousExperience <- read.csv(file = "./rawData/questionnaire/previousExperience.csv", header=T, fileEncoding="UTF-8-BOM")
head(previousExperience)
m <- c(offline, online)
k <- c(experience, aggressivity)
m <- c("offline", "online")
k <- c("experience", "aggressivity")
pe_summary <- data.frame(matrix(ncol = 2))
colnames(pe_summary) <- c("meeting", "kind", "meanVal", "sdVal")
pe_summary <- data.frame(matrix(ncol = 4))
colnames(pe_summary) <- c("meeting", "kind", "meanVal", "sdVal")
View(pe_summary)
View(mean_raw)
mean_raw[-1 , ]
mean_raw <- mean_raw[-1 , ]
row.names(mean_raw) = NULL
for (i in 1:length(m)) {
for (j in 1:length(k)) {
meanVal <- (mean(subset(previousExperience, previousExperience$meeting == m[i] & previousExperience$kind == k[j])$value))
sdVal <- (sd(subset(previousExperience, previousExperience$meeting == m[i] & previousExperience$kind == k[j])$value))
pe_summary <- rbind(pe_summary, c(m[i], k[j], meanVal, sdVal))
}
}
View(pe_summary)
pe_summary <- pe_summary[-1 , ]
View(pe_summary)
row.names(pe_summary) = NULL
# Data Visualization
# Default bar plot
p<- ggplot(pe_summary, aes(x=meeting, y=meanValue, fill=kind)) +
geom_bar(stat="identity", color="black", position=position_dodge()) +
geom_errorbar(aes(ymin=meanVal-sdVal, ymax=meanVal+sdVal), width=.2,position=position_dodge(.9))
print(p)
# Data Visualization
# Default bar plot
p<- ggplot(pe_summary, aes(x=meeting, y=meanVal, fill=kind)) +
geom_bar(stat="identity", color="black", position=position_dodge()) +
geom_errorbar(aes(ymin=meanVal-sdVal, ymax=meanVal+sdVal), width=.2,position=position_dodge(.9))
print(p)
# Default bar plot
p<- ggplot(data=pe_summary, aes(x=meeting, y=meanVal, fill=kind)) +
geom_bar(stat="identity", color="black", position=position_dodge()) +
geom_errorbar(aes(ymin=pe_summary$meanVal-sdVal, ymax=meanVal+sdVal), width=.2,position=position_dodge(.9))
print(p)
# Default bar plot
p<- ggplot(data=pe_summary, aes(x=meeting, y=meanVal, fill=kind)) +
geom_bar(stat="identity", color="black", position=position_dodge()) +
geom_errorbar(aes(ymin=pe_summary$meanVal-pe_summary$sdVal, ymax=meanVal+sdVal), width=.2,position=position_dodge(.9))
print(p)
# Default bar plot
p<- ggplot(data=pe_summary, aes(x=meeting, y=meanVal, fill=kind)) +
geom_bar(stat="identity", color="black", position=position_dodge()))
print(p)
# Default bar plot
p<- ggplot(data=pe_summary, aes(x=meeting, y=meanVal, fill=kind)) +
geom_bar(stat="identity", color="black", position=position_dodge()))
print(p)
# Default bar plot
p <- ggplot(data=pe_summary, aes(x=meeting, y=meanVal, fill=kind)) +
geom_bar(stat="identity", color="black", position=position_dodge())
print(p)
for (i in 1:length(m)) {
for (j in 1:length(k)) {
meanVal <- (mean(subset(previousExperience, previousExperience$meeting == m[i] & previousExperience$kind == k[j])$value))
sdVal <- (sd(subset(previousExperience, previousExperience$meeting == m[i] & previousExperience$kind == k[j])$value))
pe_summary <- rbind(pe_summary, c(m[i], k[j], round(meanVal,2), round(sdVal,2)))
}
}
View(pe_summary)
for (i in 1:length(m)) {
for (j in 1:length(k)) {
meanVal <- (mean(subset(previousExperience, previousExperience$meeting == m[i] & previousExperience$kind == k[j])$value))
sdVal <- (sd(subset(previousExperience, previousExperience$meeting == m[i] & previousExperience$kind == k[j])$value))
pe_summary <- rbind(pe_summary, c(m[i], k[j], round(meanVal,2), round(sdVal,2)))
}
}
View(pe_summary)
View(mean_raw)
for (i in 1:length(m)) {
for (j in 1:length(k)) {
meanVal <- (mean(subset(previousExperience, previousExperience$meeting == m[i] & previousExperience$kind == k[j])$value))
sdVal <- (sd(subset(previousExperience, previousExperience$meeting == m[i] & previousExperience$kind == k[j])$value))
pe_summary <- rbind(pe_summary, c(m[i], k[j], round(meanVal,2), round(sdVal,2)))
}
}
View(pe_summary)
m <- c("offline", "online")
k <- c("experience", "aggressivity")
pe_summary <- data.frame(matrix(ncol = 4))
colnames(pe_summary) <- c("meeting", "kind", "meanVal", "sdVal")
for (i in 1:length(m)) {
for (j in 1:length(k)) {
meanVal <- (mean(subset(previousExperience, previousExperience$meeting == m[i] & previousExperience$kind == k[j])$value))
sdVal <- (sd(subset(previousExperience, previousExperience$meeting == m[i] & previousExperience$kind == k[j])$value))
pe_summary <- rbind(pe_summary, c(m[i], k[j], round(meanVal,2), round(sdVal,2)))
}
}
View(pe_summary)
pe_summary <- pe_summary[-1 , ]
row.names(pe_summary) = NULL
# Default bar plot
p <- ggplot(data=pe_summary, aes(x=meeting, y=meanVal, fill=kind)) +
geom_bar(stat="identity", color="black", position=position_dodge() +
geom_errorbar(aes(ymin=meanVal-sdVal, ymax=meanVal+sdVal), width=.2,position=position_dodge(.9)))
print(p)
# Default bar plot
p <- ggplot(data=pe_summary, aes(x=meeting, y=meanVal, fill=kind)) +
geom_bar(stat="identity", color="black", position=position_dodge() +
geom_errorbar(aes(ymin=meanVal-sdVal, ymax=meanVal+sdVal), width=.2,position=position_dodge(.9)))
print(p)
# Default bar plot
p <- ggplot(data=pe_summary, aes(x=meeting, y=meanVal, fill=kind)) +
geom_bar(stat="identity", color="black", position=position_dodge() +
geom_errorbar(aes(ymin=meanVal-sdVal, ymax=meanVal+sdVal), width=.2,position=position_dodge(.9)))
print(p)
# Default bar plot
p<- ggplot(previousExperience, aes(x=meeting, y=meanVal, fill=sdVal)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) +
geom_errorbar(aes(ymin=meanVal-sdVal, ymax=meanVal+sdVal), width=.2,
position=position_dodge(.9))
print(p)
# Default bar plot
p<- ggplot(pe_summary, aes(x=meeting, y=meanVal, fill=sdVal)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) +
geom_errorbar(aes(ymin=meanVal-sdVal, ymax=meanVal+sdVal), width=.2,
position=position_dodge(.9))
print(p)
# Default bar plot
p <- ggplot(pe_summary, aes(x=meeting, y=meanVal, fill=sdVal)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) +
geom_errorbar(aes(ymin=meanVal-sdVal, ymax=meanVal+sdVal), width=.2,
position=position_dodge(.9))
print(p)
# Default bar plot
p <- ggplot(pe_summary, aes(x=meeting, y=meanVal, fill=kind)) +
geom_bar(stat="identity", color="black", position=position_dodge()) +
geom_errorbar(aes(ymin=meanVal-sdVal, ymax=meanVal+sdVal), width=.2,position=position_dodge(.9))
print(p)
# Default bar plot
pe_summary$meanVal = as.numeric(pe_summary$meanVal)
pe_summary$sdVal = as.numeric(pe_summary$sdVal)
p <- ggplot(pe_summary, aes(x=meeting, y=meanVal, fill=kind)) +
geom_bar(stat="identity", color="black", position=position_dodge()) +
geom_errorbar(aes(ymin=meanVal-sdVal, ymax=meanVal+sdVal), width=.2,position=position_dodge(.9))
print(p)
# Finished bar plot
p+labs(title="Tooth length per dose", x="Dose (mg)", y = "Length")+
theme_classic() +
scale_fill_manual(values=c('#999999','#E69F00'))
print(p)
# Finished bar plot
p+labs(title="Tooth length per dose", x="Dose (mg)", y = "Length")+
theme_classic() +
scale_fill_manual(values=c('#999999','#E69F00'))
print(p)
# Finished bar plot
p+labs(title="Tooth length per dose", x="Dose (mg)", y = "Length")+
theme_classic() +
scale_fill_manual(values=c('#999999','#E69F00'))
print(p)
